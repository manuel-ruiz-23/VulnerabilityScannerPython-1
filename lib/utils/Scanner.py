import sys
from lib.utils.dirs import *
from lib.utils.usage import *
from lib.utils.settings import *
from lib.handler.fingerprint import *
from lib.handler.crawler import *
import requests
import json
import urllib2

path = os.path.join(os.path.abspath('.').split('lib')[0], 'plugins/attacks/')

vulnerabilityObject = {  # This is a scanned vulnerability object
    'Name',  # name of vulnerabilty
    'Vulnerability Status'  # status of vulnerabilty

}

responseObject = {"URL_Tested": "",
                  "IdScann": "",
                  "Results": ""}

vulnerabylitiesResponse = []


class Scanner(object):

    def __init__(self, url, vulnerabilities, idScann, auth_token):
        self.url = url
        self.vulnerabilities = vulnerabilities
        self.id_scann = idScann
        self.auth_token = auth_token

    def start(self):
        kwargs = ARGS
        # PTIME(self.url)
        kwargs['auth'] = self.get_cookie_session()
        vulnerabylitiesResponse = []
        for file in dirs(path):
            name_file = file.split('.py')[0]
            result = False
            at_least_one = False
            if name_file in self.vulnerabilities:
                # crawler
                current_url = None
                result = False
                list = Crawler().run(kwargs, self.url, kwargs['data'])
                for u in list:
                        current_url = u.split("?")[0] + "?id=1"
                        __import__('plugins.attacks.%s' % name_file)
                        module = sys.modules['plugins.attacks.%s' % name_file]
                        module = module.__dict__[name_file]
                        module(kwargs, current_url, kwargs['data']).run()

        # print(vulnerabylitiesResponse)
        # CREATE POST
        responseObject = json.dumps(
            {'URL_Tested': str(self.url), 'IdScann': str(self.id_scann), 'Results': vulnerabylitiesResponse})
        print(responseObject)



    def get_cookie_session(self):
        session = requests.Session()
        session.get(self.url)
        if bool(session.cookies.get_dict()):
            for name in session.cookies.get_dict():
                cookie_name = name
            cookie_auth = cookie_name + "=" + self.auth_token
            return cookie_auth
        else:
            cookie_auth = None
            return cookie_auth


